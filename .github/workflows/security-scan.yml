name: Security Scanning

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  # Add scheduled scan for ongoing monitoring
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sundays

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.filter.outputs.python }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            python:
              - '**/*.py'
              - 'requirements.txt'
            docs:
              - '**/*.md'
              - 'LICENSE'
  
  sast-scan:
    name: SAST Scanning
    needs: changes
    # Only run if Python files changed or this is a scheduled run
    if: ${{ needs.changes.outputs.python == 'true' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Cache SAST tools
        uses: actions/cache@v3
        with:
          path: ~/.local/bin
          key: ${{ runner.os }}-sast-${{ hashFiles('**/requirements.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Run Bandit (Python SAST)
        id: bandit
        run: |
          bandit -r . -f json -o bandit-results.json || echo "issues_found=true" >> $GITHUB_OUTPUT
        timeout-minutes: 10
        
      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: bandit-results.json
        if: always() && steps.bandit.outputs.issues_found == 'true'
        
      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: p/python
          output: semgrep-results.sarif
        continue-on-error: true
        timeout-minutes: 15
        
      - name: Upload SAST results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep-results.sarif
        if: always()

  secret-scan:
    name: Secret Scanning
    needs: changes
    # Skip on doc-only changes
    if: ${{ needs.changes.outputs.docs != 'true' || needs.changes.outputs.python == 'true' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        timeout-minutes: 10

  sca-scan:
    name: SCA Scanning
    needs: changes
    # Only run if Python files changed or this is a scheduled run
    if: ${{ needs.changes.outputs.python == 'true' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety
          if [ -f requirements.txt]; then pip install -r requirements.txt; fi
        
      - name: Check if requirements.txt exists
        id: check_files
        run: |
          if [ -f "requirements.txt" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        
      - name: Run Safety Check
        id: safety
        if: steps.check_files.outputs.exists == 'true'
        run: |
          safety check --file requirements.txt --json > safety-results.json || echo "failed=true" >> $GITHUB_OUTPUT
        timeout-minutes: 5
        
      - name: Upload Safety results
        uses: actions/upload-artifact@v4
        with:
          name: safety-results
          path: safety-results.json
        if: always() && steps.check_files.outputs.exists == 'true' && steps.safety.outputs.failed == 'true'
        
      - name: Check scan results
        if: steps.check_files.outputs.exists == 'true' && steps.safety.outputs.failed == 'true'
        run: |
          echo "Vulnerable dependencies found!"
          exit 1

  finalize:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [changes, sast-scan, secret-scan, sca-scan]
    if: always()
    steps:
      - name: Determine job statuses
        run: |
          # More nuanced status checking - considering conditionally skipped jobs
          SAST_STATUS="${{ needs.sast-scan.result }}"
          SECRET_STATUS="${{ needs.secret-scan.result }}"
          SCA_STATUS="${{ needs.sca-scan.result }}"
          
          # Print statuses for debugging
          echo "SAST Status: $SAST_STATUS"
          echo "Secret Status: $SECRET_STATUS"
          echo "SCA Status: $SCA_STATUS"
          
          # Only count failures for jobs that actually ran
          FAILED=false
          
          if [[ "$SAST_STATUS" == "failure" ]]; then
            FAILED=true
            echo "SAST scanning failed"
          fi
          
          if [[ "$SECRET_STATUS" == "failure" ]]; then
            FAILED=true
            echo "Secret scanning failed"
          fi
          
          if [[ "$SCA_STATUS" == "failure" ]]; then
            FAILED=true
            echo "Dependency scanning failed"
          fi
          
          if [[ "$FAILED" == "true" ]]; then
            echo "⚠️ One or more security scans failed!"
            # Exit with success to avoid failing the overall workflow
            # This makes the report show warnings but doesn't fail CI
            # Remove this if you want strict security enforcement
            # exit 1
          else
            echo "✅ All security checks passed or resulted in warnings."
          fi
